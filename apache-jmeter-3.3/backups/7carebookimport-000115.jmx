<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">5</stringProp>
        <longProp name="ThreadGroup.start_time">1464807845000</longProp>
        <longProp name="ThreadGroup.end_time">1464811445000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">3600</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="false">
          <stringProp name="filename">S:\QA\Jmeter\script\regress and TM script new scenario\enrollmentapp.txt</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">user,fn,ln,id</stringProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
        </CSVDataSet>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.FirefoxDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig" testname="jp@gc - Firefox Driver Config" enabled="false">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <boolProp name="FirefoxDriverConfig.general.useragent.override.enabled">true</boolProp>
          <boolProp name="FirefoxDriverConfig.network.negotiate-auth.allow-insecure-ntlm-v1">false</boolProp>
          <collectionProp name="FirefoxDriverConfig.general.extensions"/>
          <collectionProp name="FirefoxDriverConfig.general.preferences"/>
          <stringProp name="FirefoxDriverConfig.general.useragent.override"></stringProp>
        </com.googlecode.jmeter.plugins.webdriver.config.FirefoxDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">/Users/kiwitech/Downloads/chromedriver/chromedriver</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler-1" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)//WebDriver classes
var wait = new pkg.WebDriverWait(WDS.browser, 30)
WDS.sampleResult.sampleStart()//captures samplerâ€™s start time
WDS.browser.get(&apos;http://52.20.103.16/webqa/login&apos;)
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.name(&apos;email&apos;)))
var searchField = WDS.browser.findElement(pkg.By.name(&apos;email&apos;))
searchField.sendKeys([&apos;abhi@yopmail.com&apos;])
java.lang.Thread.sleep( 1000 )
var pswd = WDS.browser.findElement(pkg.By.name(&apos;password&apos;))
pswd.sendKeys([&apos;abhi@12345&apos;])
java.lang.Thread.sleep( 1000 )
var signin = WDS.browser.findElement(pkg.By.xpath(&apos;//*[@id=&quot;main_wrapper&quot;]/app-login/div/md-card/md-card-content/div/form/div/div[3]/button&apos;))
java.lang.Thread.sleep( 1000 )
signin.click()
java.lang.Thread.sleep( 600000 )

</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="false">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="false">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)//WebDriver classes
var wait = new pkg.WebDriverWait(WDS.browser, 50)

WDS.sampleResult.sampleStart()


WDS.browser.navigate().refresh()
WDS.browser.get(&apos;https://stg.gsihealth.net/dashboard/&apos;)
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.name(&apos;UserID&apos;)))
var searchField = WDS.browser.findElement(pkg.By.name(&apos;UserID&apos;))
searchField.sendKeys([&apos;${user}&apos;])
//searchField.sendKeys([&apos;jmeter1@test.com&apos;])
var pswd = WDS.browser.findElement(pkg.By.name(&apos;Password&apos;))
pswd.sendKeys([&apos;Test123#&apos;])


var button = WDS.browser.findElement(pkg.By.xpath(&quot;//div[text()=&apos;Login&apos;]&quot;))
button.click()

//java.lang.Thread.sleep( 10000 )

var parentHandle = WDS.browser.getWindowHandle()	

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//div[@class=&apos;treat-icon iphone-ui-common&apos;]&quot;)))

var careplan = WDS.browser.findElement(pkg.By.xpath(&quot;//div[@class=&apos;treat-icon iphone-ui-common&apos;]&quot;))

    				
careplan.click()
var handles = WDS.browser.getWindowHandles()
var iterator = handles.iterator()
while (iterator.hasNext())
{
   var handle = iterator.next()
   WDS.browser.switchTo().window(handle)
   
}

WDS.browser.wait(20000)
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;navbuttons_search&apos;]/a&quot;)))

var button_New = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;navbuttons_search&apos;]/a&quot;)).click()//For Click New Button in message app
WDS.browser.wait(20000)
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.name(&apos;lastname&apos;)))
var lastname = WDS.browser.findElement(pkg.By.name(&apos;lastname&apos;))
lastname.sendKeys([&apos;${ln}&apos;])
//lastname.sendKeys([&apos;test&apos;])
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.name(&apos;lastname&apos;)))
var fn = WDS.browser.findElement(pkg.By.name(&apos;firstname&apos;))
fn.sendKeys([&apos;${fn}&apos;])


wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.name(&apos;lookup&apos;)))
var buttonl = WDS.browser.findElement(pkg.By.name(&apos;lookup&apos;))
buttonl.click()

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.linkText(&apos;Details&apos;)))
var details = WDS.browser.findElement(pkg.By.linkText(&apos;Details&apos;))
details.click()
       
       wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.linkText(&apos;Encounter Information&apos;)))
var ep = WDS.browser.findElement(pkg.By.linkText(&apos;Encounter Information&apos;))
ep.click()

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.linkText(&apos;Create New&apos;)))
var newenc = WDS.browser.findElement(pkg.By.linkText(&apos;Create New&apos;))
newenc.click()

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//select[@name=&apos;recType11_q1&apos;]&quot;)))

  WDS.browser.findElement(pkg.By.xpath(&quot;//select[@name=&apos;recType11_q1&apos;]/option[contains(text(),&apos;aaaorgtwo&apos;)]&quot;)).click()

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.name(&apos;imgCalendar&apos;)))
var calender = WDS.browser.findElement(pkg.By.name(&apos;imgCalendar&apos;))
calender.click()

var year = WDS.browser.findElement(pkg.By.xpath(&quot;//select[@class=&apos;ui-datepicker-year&apos;]&quot;)).click()

var yearsec = WDS.browser.findElement(pkg.By.xpath(&quot;//select[@class=&apos;ui-datepicker-year&apos;]/option[text()=&apos;2016&apos;]&quot;)).click()
                                         


var month = WDS.browser.findElement(pkg.By.xpath(&quot;//select[@class=&apos;ui-datepicker-month&apos;]&quot;)).click()
var monthsecsec = WDS.browser.findElement(pkg.By.xpath(&quot;//select[@class=&apos;ui-datepicker-month&apos;]/option[text()=&apos;Jul&apos;]&quot;)).click()

var datesec = WDS.browser.findElement(pkg.By.xpath(&quot;//a[text()=&apos;2&apos;]&quot;)).click()

 
 wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//select[@name=&apos;patientclass&apos;]&quot;)))

  WDS.browser.findElement(pkg.By.xpath(&quot;//select[@name=&apos;patientclass&apos;]/option[contains(text(),&apos;Other&apos;)]&quot;)).click()
  
  
  wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//select[@name=&apos;service&apos;]&quot;)))

  WDS.browser.findElement(pkg.By.xpath(&quot;//select[@name=&apos;service&apos;]/option[contains(text(),&apos;Searching&apos;)]&quot;)).click()
  
  
  
  wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//select[@name=&apos;admittype&apos;]&quot;)))

  WDS.browser.findElement(pkg.By.xpath(&quot;//select[@name=&apos;admittype&apos;]/option[contains(text(),&apos;Phone&apos;)]&quot;)).click()
  
  wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//select[@name=&apos;status&apos;]&quot;)))

  WDS.browser.findElement(pkg.By.xpath(&quot;//select[@name=&apos;status&apos;]/option[contains(text(),&apos;Attended&apos;)]&quot;)).click()
  
   wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//input[@id=&apos;recType11_q2_1&apos;]&quot;)))

  WDS.browser.findElement(pkg.By.xpath(&quot;//input[@id=&apos;recType11_q2_1&apos;]&quot;)).click()
  
  
 
              var st = WDS.browser.findElement(pkg.By.xpath(&quot;//input[@value=&apos;Save&apos;]&quot;)).click()
              
            wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//a[text()=&apos;Logoff&apos;]&quot;)))
            
//Logout treat 
WDS.browser.findElement(pkg.By.xpath(&quot;//a[text()=&apos;Logoff&apos;]&quot;)).click()


   //TMNavigate and wait
WDS.browser.switchTo().window(parentHandle) 

WDS.browser.wait(10000)
WDS.browser.navigate().refresh()
           // WDS.browser.stop()
         
 //           wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//div[@class=&apos;treat-icon iphone-ui-common&apos;]&quot;)))
//var tm = WDS.browser.findElement(pkg.By.xpath(&quot;//div[@class=&apos;patient-summary-icon iphone-ui-common&apos;]&quot;))
//tm.click()//Click Task Manager app


//java.lang.Thread.sleep( 30000 )

//wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//span[contains(text(),&apos;Status&apos;)]&quot;)))
//WDS.browser.findElement(pkg.By.xpath(&quot;//span[contains(text(),&apos;Status&apos;)]&quot;)).click()
//java.lang.Thread.sleep( 30000 )
 
//-*-
//wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//a[text()=&apos;Logout&apos;]&quot;)))
//Logout
//WDS.browser.findElement(pkg.By.xpath(&quot;//a[text()=&apos;Logout&apos;]&quot;)).click()
//WDS.browser.findElement(pkg.By.xpath(&quot;(//div[contains(text(),&apos;Yes&apos;)])[last()]&quot;)).click()
//wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.name(&apos;UserID&apos;)))


WDS.sampleResult.sampleEnd()</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="false">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium, org.openqa.selenium.support.ui)//WebDriver classes
var wait = new pkg.WebDriverWait(WDS.browser, 30)

WDS.sampleResult.sampleStart()//captures samplerâ€™s start time
WDS.browser.get(&apos;https://qa.gsihealth.net/dashboard/index.jsp&apos;)//opens url
//WDS.browser.get(&apos;https://nfmmc.gsihealth.com/dashboard/index.jsp&apos;)
var searchField = WDS.browser.findElement(pkg.By.name(&quot;UserID&quot;))//saves search field into searchField 
searchField.sendKeys([&apos;su@test.com&apos;])//types word  in field
//searchField.sendKeys([&apos;su@test.com&apos;])
var pswd = WDS.browser.findElement(pkg.By.name(&apos;Password&apos;))
//pswd.sendKeys([&apos;Test983$&apos;])
pswd.sendKeys([&apos;Test123#&apos;])
WDS.browser.executeScript(&apos;window.scrollTo(0, 250);&apos;)
var button = WDS.browser.findElement(pkg.By.xpath(&quot;//div[text()=&apos;Login&apos;]&quot;))
button.click()//Click Login Button

java.lang.Thread.sleep( 10000 )
var text1 = WDS.browser.findElement(pkg.By.id(&quot;txtSearchPatientFirst&quot;))
text1.clear()
text1.sendKeys(&quot;daffy&quot;)
var text1 = WDS.browser.findElement(pkg.By.id(&quot;txtSearchPatientLast&quot;))
text1.clear()
text1.sendKeys(&quot;duck&quot;)
java.lang.Thread.sleep( 4000 )
var img1 = WDS.browser.findElement(pkg.By.xpath(&quot;/html/body/div[2]/div[2]/header/md-toolbar/div[1]/span[2]/md-icon[1]&quot;))
//var img1 = WDS.browser.findElement(pkg.By.xpath(&quot;//img[contains(@src,&apos;https://qa.gsihealth.net/dashboard/dashboardapp/sc/skins/EnterpriseBlue/images/pickers/search_picker.png&apos;)]&quot;))
img1.click()
java.lang.Thread.sleep( 4000 )



// var table = WDS.browser.findElement(pkg.By.className(&quot;listTable&quot;))
// 
// var rows = WDS.table.findElement(pkg.By.tagName(&quot;td&quot;))
// 
// 
// 
// 
// var ser1 = WDS.browser.findElement(pkg.By.xpath(&quot;/html/body/div[10]/div[2]/div/div/div/div/div/div[2]/div/table[1]/tbody[2]/tr/td[2]/div&quot;))
// //var ser1 = WDS.browser.findElement(pkg.By.xpath(&quot;//div[starts-with(@eventproxy,&apos;isc_ListGrid&apos;) and contains(@eventproxy,&apos;body&apos;)]//div[contains(text(),&apos;albert&apos;)]&quot;))
// ser1.click() 
// ser1.click() 
// ser1.click() 
// java.lang.Thread.sleep( 4000 )

// var parentHandle = WDS.browser.getWindowHandle() 
//     
// var handles = WDS.browser.getWindowHandles()
// var iterator = handles.iterator()
// while (iterator.hasNext())
// {
//    var handle = iterator.next()
//    WDS.browser.switchTo().window(handle)
//    
// }
java.lang.Thread.sleep( 20000 )
wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;/html/body/div[1]/div/form/span[2]/div[3]/fieldset[1]/legend&quot;)))
var ser12 = WDS.browser.findElement(pkg.By.xpath(&quot;/html/body/div[1]/div/form/span[2]/div[3]/fieldset[1]/legend&quot;))
ser12.click() 
java.lang.Thread.sleep( 4000 )
WDS.browser.executeScript(&apos;window.scrollTo(0, 250);&apos;)
//((JavascriptExecutor)WDS.browser),executeScript(&quot;scroll(0,400)&quot;);

//var scroll = ((JavascriptExecutor), WDS.browser).executeScript(&quot;arguments[0].scrollIntoView(true);&quot;, element);
//scroll.click()
//JavascriptExecutor je = (JavascriptExecutor) WDS.browser;
 var ser15 = WDS.browser.findElement(pkg.By.xpath(&quot;/html/body/div[1]/div/form/span[2]/div[3]/fieldset[2]/legend&quot;))
ser15.click()   
//je.executeScript(&quot;arguments[0].scrollIntoView(true);&quot;,element);
java.lang.Thread.sleep( 4000 )
WDS.browser.executeScript(&apos;window.scrollTo(0, 250);&apos;)
var ser13 = WDS.browser.findElement(pkg.By.xpath(&quot;/html/body/div[1]/div/form/span[2]/div[6]/div[1]/div/h3[3]/a&quot;))
ser13.click() 
java.lang.Thread.sleep( 4000 )
WDS.browser.executeScript(&apos;window.scrollTo(0, 250);&apos;)

var ser14 = WDS.browser.findElement(pkg.By.xpath(&quot;/html/body/div[1]/div/form/span[2]/div[5]/div[1]/div/h3[1]/&quot;))
ser14.click() 
java.lang.Thread.sleep( 4000 )
WDS.browser.executeScript(&apos;window.scrollTo(0, 250);&apos;)
var ser14 = WDS.browser.findElement(pkg.By.xpath(&quot;/html/body/div[1]/div/div[3]/div[1]/div/h3[1]/a&quot;))
ser14.click()
java.lang.Thread.sleep( 4000 )





// 
// 
// 
// wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//*[@id=&apos;navbuttons_search&apos;]/a&quot;)))
// 
// var button_New = WDS.browser.findElement(pkg.By.xpath(&quot;//*[@id=&apos;navbuttons_search&apos;]/a&quot;)).click()//For Click New Button in message app
// 
// wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.name(&apos;lastname&apos;)))
// var lastname = WDS.browser.findElement(pkg.By.name(&apos;lastname&apos;))
// lastname.sendKeys([&apos;TestUser&apos;])
// 
// wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.name(&apos;lastname&apos;)))
// var fn = WDS.browser.findElement(pkg.By.name(&apos;firstname&apos;))
// fn.sendKeys([&apos;TestUser&apos;])
// 
// 
// wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.name(&apos;lookup&apos;)))
// var buttonl = WDS.browser.findElement(pkg.By.name(&apos;lookup&apos;))
// buttonl.click()
// 
// wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.linkText(&apos;Details&apos;)))
// var details = WDS.browser.findElement(pkg.By.linkText(&apos;Details&apos;))
// details.click()
//        
//        wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.linkText(&apos;Encounter Information&apos;)))
// var ep = WDS.browser.findElement(pkg.By.linkText(&apos;Encounter Information&apos;))
// ep.click()
// 
// wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.linkText(&apos;Create New&apos;)))
// var newenc = WDS.browser.findElement(pkg.By.linkText(&apos;Create New&apos;))
// newenc.click()
// 
// wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//select[@name=&apos;recType11_q1&apos;]&quot;)))
// 
//   WDS.browser.findElement(pkg.By.xpath(&quot;//select[@name=&apos;recType11_q1&apos;]/option[contains(text(),&apos;abcd&apos;)]&quot;)).click()
// 
// wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.name(&apos;imgCalendar&apos;)))
// var calender = WDS.browser.findElement(pkg.By.name(&apos;imgCalendar&apos;))
// calender.click()
// 
// var year = WDS.browser.findElement(pkg.By.xpath(&quot;//select[@class=&apos;ui-datepicker-year&apos;]&quot;)).click()
// 
// var yearsec = WDS.browser.findElement(pkg.By.xpath(&quot;//select[@class=&apos;ui-datepicker-year&apos;]/option[text()=&apos;2015&apos;]&quot;)).click()
//                                            //  xpath=//select[@class=&apos;ui-datepicker-year&apos;]/option[text()=&apos;${year}&apos;]
// 
// 
// var month = WDS.browser.findElement(pkg.By.xpath(&quot;//select[@class=&apos;ui-datepicker-month&apos;]&quot;)).click()
// var monthsecsec = WDS.browser.findElement(pkg.By.xpath(&quot;//select[@class=&apos;ui-datepicker-month&apos;]/option[text()=&apos;Jun&apos;]&quot;)).click()
// 
// var datesec = WDS.browser.findElement(pkg.By.xpath(&quot;//a[text()=&apos;1&apos;]&quot;)).click()
// 
// //click xpath=//a[text()=&apos;${date}&apos;]
//  
//  wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//select[@name=&apos;patientclass&apos;]&quot;)))
// 
//   WDS.browser.findElement(pkg.By.xpath(&quot;//select[@name=&apos;patientclass&apos;]/option[contains(text(),&apos;Other&apos;)]&quot;)).click()
//   
// 
// 
//   
//   wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//select[@name=&apos;service&apos;]&quot;)))
// 
//   WDS.browser.findElement(pkg.By.xpath(&quot;//select[@name=&apos;service&apos;]/option[contains(text(),&apos;Searching&apos;)]&quot;)).click()
//   
//   
  
//   wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//select[@name=&apos;admittype&apos;]&quot;)))
// 
//   WDS.browser.findElement(pkg.By.xpath(&quot;//select[@name=&apos;admittype&apos;]/option[contains(text(),&apos;Phone&apos;)]&quot;)).click()
//   
//   wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//select[@name=&apos;status&apos;]&quot;)))
// 
//   WDS.browser.findElement(pkg.By.xpath(&quot;//select[@name=&apos;status&apos;]/option[contains(text(),&apos;Attended&apos;)]&quot;)).click()
//   
//    wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//input[@id=&apos;recType11_q2_1&apos;]&quot;)))
// 
//   WDS.browser.findElement(pkg.By.xpath(&quot;//input[@id=&apos;recType11_q2_1&apos;]&quot;)).click()
//   
//   
//   //xpath=//div[div[contains(text(),&quot;From Date&quot;)]]//input[@class=&apos;dijitReset dijitInputInner&apos;]
//   
// //html/body/table/tbody/tr/td[2]/table[3]/tbody/tr/td/div[2]/table/tbody/tr[2]/td/form[1]/center/table/tbody/tr[6]/td[3]/select
// 
// 
//               var st = WDS.browser.findElement(pkg.By.xpath(&quot;//input[@value=&apos;Save&apos;]&quot;)).click()
//               
//             wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//a[text()=&apos;Logoff&apos;]&quot;)))
//Logout
WDS.browser.findElement(pkg.By.xpath(&quot;//a[text()=&apos;Logoff&apos;]&quot;)).click()
                       // close newly opened window when done with it
    WDS.browser.switchTo().window(parentHandle)       // switch back to the original window
    
              wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.xpath(&quot;//a[text()=&apos;Logout&apos;]&quot;)))
//Logout
WDS.browser.findElement(pkg.By.xpath(&quot;//a[text()=&apos;Logout&apos;]&quot;)).click()
WDS.browser.findElement(pkg.By.xpath(&quot;(//div[contains(text(),&apos;Yes&apos;)])[last()]&quot;)).click()

wait.until(pkg.ExpectedConditions.presenceOfElementLocated(pkg.By.name(&quot;UserID&quot;)))

WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
            </value>
          </objProp>
          <stringProp name="filename">S:\QA\Jmeter\results\regress and TM script new scenario\1successsystemtask_${TESTSTART.MS}Results.csv</stringProp>
          <boolProp name="ResultCollector.success_only_logging">true</boolProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SimpleDataWriter" testclass="ResultCollector" testname="Simple Data Writer" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
            </value>
          </objProp>
          <stringProp name="filename">S:\QA\Jmeter\results\regress and TM script new scenario\systemtasktotal_${TESTSTART.MS}Results.csv</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="false">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">S:\QA\Jmeter\chromedriver_win32_2.22\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
      </hashTree>
      <com.googlecode.jmeter.plugins.webdriver.config.InternetExplorerDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.InternetExplorerDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.InternetExplorerDriverConfig" testname="jp@gc - Internet Explorer Driver Config" enabled="false">
        <stringProp name="WebDriverConfig.proxy_type">DIRECT</stringProp>
        <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
        <stringProp name="WebDriverConfig.http_host"></stringProp>
        <intProp name="WebDriverConfig.http_port">8080</intProp>
        <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
        <stringProp name="WebDriverConfig.https_host"></stringProp>
        <intProp name="WebDriverConfig.https_port">8080</intProp>
        <stringProp name="WebDriverConfig.ftp_host"></stringProp>
        <intProp name="WebDriverConfig.ftp_port">8080</intProp>
        <stringProp name="WebDriverConfig.socks_host"></stringProp>
        <intProp name="WebDriverConfig.socks_port">8080</intProp>
        <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
        <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
        <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
        <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
        <stringProp name="InternetExplorerDriverConfig.iedriver_path">S:\QA\Jmeter\IE11new\IEDriverServer_Win32_2.53.0/IEDriverServer.exe</stringProp>
      </com.googlecode.jmeter.plugins.webdriver.config.InternetExplorerDriverConfig>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
